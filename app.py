import os
import logging
from flask import Flask, request, jsonify, send_from_directory, render_template_string
from werkzeug.utils import secure_filename
from flask_cors import CORS
import uuid


app = Flask(__name__)
CORS(app, origins=["http://localhost:5173"])
UPLOAD_FOLDER = 'diagrams/'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# --- Logging Setup ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s %(message)s',
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Static file serving for diagrams folder
@app.route('/diagrams/<path:filename>')
def serve_diagram_file(filename):
    return send_from_directory(UPLOAD_FOLDER, filename)



from llm_providers import generate_code_openai

@app.route('/generate', methods=['POST'])
def generate_diagram():
    import re, subprocess, traceback, resource
    from diagrams_whitelist import is_code_whitelisted


    data = request.json
    description = data.get('description') if data else None
    if description is None:
        logger.warning(f"Missing description in request. Description: {description}")
        return jsonify({'error': 'Description is required'}), 400
    if not isinstance(description, str) or not description.strip():
        logger.warning("Description is not a non-empty string.")
        return jsonify({'error': 'Description must be a non-empty string.'}), 400
    logger.info(f"Received diagram generation request. Description: {str(description)[:100]}...")


    # --- Cloud Provider Detection and Instructions Selection ---

    # --- Cloud Provider Selection from Request ---
    provider = data.get('provider') if data else None
    if provider:
        provider = provider.strip().lower()

    if provider == "aws":
        instructions_file = "instructions_aws.md"
    elif provider == "azure":
        instructions_file = "instructions_azure.md"
    elif provider == "gcp":
        instructions_file = "instructions_gcp.md"
    else:
        logger.info("No cloud provider specified in request. Returning error.")
        return jsonify({'error': 'No cloud provider specified. Please set provider to aws, azure, or gcp.'}), 400

    try:
        with open(instructions_file, 'r') as f:
            instructions = f.read()
    except Exception as e:
        logger.error(f"Failed to read {instructions_file}: {e}")
        return jsonify({'error': f'Failed to read {instructions_file}'}), 500

    # --- Input Validation ---

    if not isinstance(description, str) or not description.strip():
        logger.warning("Description is not a non-empty string.")
        return jsonify({'error': 'Description must be a non-empty string.'}), 400
    if len(description) > 15000:
        logger.warning("Description is too long.")
        return jsonify({'error': 'Description is too long (max 15000 chars).'}), 400

    # --- OpenAI Error Handling ---

    try:
        code = generate_code_openai(description, instructions)
        logger.info("Code generated by OpenAI successfully.")
    except Exception as e:
        tb = traceback.format_exc()
        # Handle OpenAI rate limit error for both old and new SDKs
        if (hasattr(e, 'status_code') and e.status_code == 429) or 'quota' in str(e).lower() or 'rate limit' in str(e).lower():
            logger.error(f"OpenAI API quota exceeded: {e}")
            return jsonify({
                'error': 'OpenAI API quota exceeded. Please check your plan and billing at https://platform.openai.com/account/usage',
                'python_code': None,
                'raw_code_url': None,
                'sanitized_code_url': None
            }), 429
        logger.error(f"OpenAI API error: {e}\n{tb}")
        return jsonify({'error': f'OpenAI API error: {str(e)}', 'traceback': tb}), 500

    # Save the generated code before whitelisting
    code_filename = os.path.join(UPLOAD_FOLDER, 'generated_diagram_raw.py')

    try:
        with open(code_filename, 'w') as f:
            f.write(code)
        logger.info(f"Raw code saved to {code_filename}")
    except Exception as e:
        logger.error(f"Failed to save raw code: {e}")
        return jsonify({'error': 'Failed to save raw code'}), 500

    # --- Resource Whitelisting ---

    allowed, bad_line = is_code_whitelisted(code)
    if not allowed:
        logger.warning(f"Code failed whitelist: {bad_line}")
        return jsonify({'error': f'Invalid or unsupported import in generated code: {bad_line}', 'raw_code_file': code_filename}), 400

    # Sanitize: always inject filename="generated_diagram" into every with Diagram(...) statement
    code = re.sub(r'filename\s*=\s*["\']([^"\']+)["\']', 'filename="generated_diagram"', code)
    code = re.sub(r'outformat\s*=\s*["\']([^"\']+)["\']', 'outformat="png"', code)
    code_filename = os.path.join(UPLOAD_FOLDER, 'generated_diagram.py')

    try:
        with open(code_filename, 'w') as f:
            f.write(code)
        logger.info(f"Sanitized code saved to {code_filename}")
    except Exception as e:
        logger.error(f"Failed to save sanitized code: {e}")
        return jsonify({'error': 'Failed to save sanitized code'}), 500

    # Diagram generation subprocess call
    cwd = os.getcwd()
    os.chdir(UPLOAD_FOLDER)
    try:
        proc = subprocess.run(
            ['python3', 'generated_diagram.py'],
            capture_output=True,
            text=True,
            timeout=60
        )
        logger.info(f"Diagram code executed. Return code: {proc.returncode}")
        if proc.returncode != 0:
            logger.error(f"Diagram code execution failed. Stderr: {proc.stderr}\nStdout: {proc.stdout}")
            os.chdir(cwd)
            # Try to return the diagram if it was generated, even if there was an error
            import re as _re
            image_candidates = []
            try:
                with open(os.path.join(UPLOAD_FOLDER, 'generated_diagram.py'), 'r') as f:
                    code_content = f.read()
                m = _re.search(r'filename\s*=\s*["\']([^"\']+)["\']', code_content)
                if m:
                    base = m.group(1)
                    if not base.endswith('.png'):
                        base_png = base + '.png'
                    else:
                        base_png = base
                    image_candidates.append(os.path.join(UPLOAD_FOLDER, base_png))
                    image_candidates.append(os.path.join(UPLOAD_FOLDER, os.path.basename(base_png)))
                else:
                    m2 = _re.search(r'with Diagram\((?:["\'])(.*?)(?:["\'])', code_content)
                    if m2:
                        title = m2.group(1)
                        title_clean = title.lower().replace(' ', '_').replace('/', '_')
                        image_candidates.append(os.path.join(UPLOAD_FOLDER, title_clean + '.png'))
            except Exception as e:
                logger.warning(f"Could not infer image filename from code: {e}")

            for candidate in image_candidates:
                if os.path.exists(candidate):
                    fname = os.path.relpath(candidate, UPLOAD_FOLDER)
                    image_url = f'/diagrams/{fname.replace(os.sep, "/")}'
                    logger.info(f"Diagram generated (with error): {candidate}")
                    return jsonify({'diagram_path': candidate, 'image_url': image_url, 'error': 'Diagram code execution failed', 'stderr': proc.stderr, 'stdout': proc.stdout}), 206

            for root, dirs, files in os.walk(UPLOAD_FOLDER):
                for fname in files:
                    if fname.endswith('.png'):
                        diagram_path = os.path.join(root, fname)
                        rel_path = os.path.relpath(diagram_path, UPLOAD_FOLDER)
                        image_url = f'/diagrams/{rel_path.replace(os.sep, "/")}'
                        logger.info(f"Diagram generated (with error): {diagram_path}")
                        return jsonify({'diagram_path': diagram_path, 'image_url': image_url, 'error': 'Diagram code execution failed', 'stderr': proc.stderr, 'stdout': proc.stdout}), 206

            return jsonify({'error': 'Diagram code execution failed', 'stderr': proc.stderr, 'stdout': proc.stdout}), 500
    except Exception as e:
        logger.error(f"Diagram execution error: {e}")
        os.chdir(cwd)
        return jsonify({'error': f'Diagram execution error: {str(e)}'}), 500
    os.chdir(cwd)

    # Try to infer the output image filename from the generated code
    import re as _re
    image_candidates = []
    try:
        with open(os.path.join(UPLOAD_FOLDER, 'generated_diagram.py'), 'r') as f:
            code_content = f.read()
        # Look for filename argument
        m = _re.search(r'filename\s*=\s*["\']([^"\']+)["\']', code_content)
        if m:
            base = m.group(1)
            # diagrams library appends .png if not present
            if not base.endswith('.png'):
                base_png = base + '.png'
            else:
                base_png = base
            # If base contains path separators, search for that path
            image_candidates.append(os.path.join(UPLOAD_FOLDER, base_png))
            # Also try just the basename in case it was saved flat
            image_candidates.append(os.path.join(UPLOAD_FOLDER, os.path.basename(base_png)))
        else:
            # Try to infer from Diagram title
            m2 = _re.search(r'with Diagram\((?:["\'])(.*?)(?:["\'])', code_content)
            if m2:
                title = m2.group(1)
                # diagrams library replaces spaces and slashes with underscores, lowercases, and may split on / for folders
                title_clean = title.lower().replace(' ', '_').replace('/', '_')
                image_candidates.append(os.path.join(UPLOAD_FOLDER, title_clean + '.png'))
    except Exception as e:
        logger.warning(f"Could not infer image filename from code: {e}")

    # Collect all output formats for the diagram
    output_formats = ["png", "svg", "pdf", "dot", "jpg"]
    base_names = set()
    for candidate in image_candidates:
        if os.path.exists(candidate):
            base = os.path.splitext(os.path.basename(candidate))[0]
            base_names.add(base)

    # Fallback: search for any output file in UPLOAD_FOLDER and subfolders
    for root, dirs, files in os.walk(UPLOAD_FOLDER):
        for fname in files:
            for ext in output_formats:
                if fname.endswith('.' + ext):
                    base = os.path.splitext(fname)[0]
                    base_names.add(base)

    if base_names:
        urls = {}
        for base in base_names:
            for ext in output_formats:
                fpath = os.path.join(UPLOAD_FOLDER, f"{base}.{ext}")
                if os.path.exists(fpath):
                    rel_path = os.path.relpath(fpath, UPLOAD_FOLDER)
                    urls[ext] = f'/diagrams/{rel_path.replace(os.sep, "/")}'
        logger.info(f"Diagram files generated: {urls}")

        # Add code URLs and code string to response (only sanitized code as string)
        raw_code_url = '/diagrams/generated_diagram_raw.py'
        sanitized_code_url = '/diagrams/generated_diagram.py'
        python_code = None
        try:
            with open(os.path.join(UPLOAD_FOLDER, 'generated_diagram.py'), 'r') as f:
                python_code = f.read()
        except Exception as e:
            logger.warning(f"Could not read sanitized code for response: {e}")

        return jsonify({
            'diagram_files': urls,
            'raw_code_url': raw_code_url,         # Only URL for raw code
            'sanitized_code_url': sanitized_code_url
        })

    logger.error("Diagram image not found after code execution.")
    return jsonify({'error': 'Diagram image not found'}), 500


if __name__ == '__main__':
    app.run(debug=True, port=5050)
