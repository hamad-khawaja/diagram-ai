

import os
import logging
from flask import Flask, request, jsonify, send_from_directory, render_template_string
from werkzeug.utils import secure_filename


app = Flask(__name__)
UPLOAD_FOLDER = 'diagrams/'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# --- Logging Setup ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s %(message)s',
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Static file serving for diagrams folder
@app.route('/diagrams/<path:filename>')
def serve_diagram_file(filename):
    return send_from_directory(UPLOAD_FOLDER, filename)



from llm_providers import generate_code_openai

@app.route('/generate', methods=['POST'])
def generate_diagram():
    import re, subprocess, traceback, resource
    from diagrams_whitelist import is_code_whitelisted


    data = request.json
    description = data.get('description') if data else None
    if description is None:
        logger.warning(f"Missing description in request. Description: {description}")
        return jsonify({'error': 'Description is required'}), 400
    if not isinstance(description, str) or not description.strip():
        logger.warning("Description is not a non-empty string.")
        return jsonify({'error': 'Description must be a non-empty string.'}), 400
    logger.info(f"Received diagram generation request. Description: {str(description)[:100]}...")

    # Read instructions.md

    try:
        with open('instructions.md', 'r') as f:
            instructions = f.read()
    except Exception as e:
        logger.error(f"Failed to read instructions.md: {e}")
        return jsonify({'error': 'Failed to read instructions.md'}), 500

    # --- Input Validation ---

    if not isinstance(description, str) or not description.strip():
        logger.warning("Description is not a non-empty string.")
        return jsonify({'error': 'Description must be a non-empty string.'}), 400
    if len(description) > 1000:
        logger.warning("Description is too long.")
        return jsonify({'error': 'Description is too long (max 1000 chars).'}), 400

    # --- OpenAI Error Handling ---

    try:
        code = generate_code_openai(description, instructions)
        logger.info("Code generated by OpenAI successfully.")
    except Exception as e:
        tb = traceback.format_exc()
        logger.error(f"OpenAI API error: {e}\n{tb}")
        return jsonify({'error': f'OpenAI API error: {str(e)}', 'traceback': tb}), 500

    # Save the generated code before whitelisting
    code_filename = os.path.join(UPLOAD_FOLDER, 'generated_diagram_raw.py')

    try:
        with open(code_filename, 'w') as f:
            f.write(code)
        logger.info(f"Raw code saved to {code_filename}")
    except Exception as e:
        logger.error(f"Failed to save raw code: {e}")
        return jsonify({'error': 'Failed to save raw code'}), 500

    # --- Resource Whitelisting ---

    allowed, bad_line = is_code_whitelisted(code)
    if not allowed:
        logger.warning(f"Code failed whitelist: {bad_line}")
        return jsonify({'error': f'Invalid or unsupported import in generated code: {bad_line}', 'raw_code_file': code_filename}), 400

    code = re.sub(r'filename\s*=\s*["\']([^"\']+)["\']', 'filename="generated_diagram"', code)
    code = re.sub(r'outformat\s*=\s*["\']([^"\']+)["\']', 'outformat="png"', code)
    code_filename = os.path.join(UPLOAD_FOLDER, 'generated_diagram.py')

    try:
        with open(code_filename, 'w') as f:
            f.write(code)
        logger.info(f"Sanitized code saved to {code_filename}")
    except Exception as e:
        logger.error(f"Failed to save sanitized code: {e}")
        return jsonify({'error': 'Failed to save sanitized code'}), 500

    # --- Diagram Generation Error Handling (always subprocess, always secure) ---

    # Resource limits temporarily disabled for debugging
    # def set_limits():
    #     resource.setrlimit(resource.RLIMIT_CPU, (10, 10))
    #     resource.setrlimit(resource.RLIMIT_AS, (256 * 1024 * 1024, 256 * 1024 * 1024))


    cwd = os.getcwd()
    os.chdir(UPLOAD_FOLDER)
    try:
        proc = subprocess.run(
            ['python3', 'generated_diagram.py'],
            capture_output=True,
            text=True,
            timeout=30
            # preexec_fn=set_limits  # Disabled for debugging
        )
        logger.info(f"Diagram code executed. Return code: {proc.returncode}")
        if proc.returncode != 0:
            logger.error(f"Diagram code execution failed. Stderr: {proc.stderr}\nStdout: {proc.stdout}")
            os.chdir(cwd)
            return jsonify({'error': 'Diagram code execution failed', 'stderr': proc.stderr, 'stdout': proc.stdout}), 500
    except Exception as e:
        logger.error(f"Diagram execution error: {e}")
        os.chdir(cwd)
        return jsonify({'error': f'Diagram execution error: {str(e)}'}), 500
    os.chdir(cwd)
    for fname in os.listdir(UPLOAD_FOLDER):
        if fname.endswith('.png'):
            diagram_path = os.path.join(UPLOAD_FOLDER, fname)
            logger.info(f"Diagram generated: {diagram_path}")
            return jsonify({'diagram_path': diagram_path, 'image_url': f'/diagrams/{fname}'})
    logger.error("Diagram image not found after code execution.")
    return jsonify({'error': 'Diagram image not found'}), 500


if __name__ == '__main__':
    app.run(debug=True)
