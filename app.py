import os
import logging
from flask import Flask, request, jsonify, send_from_directory, render_template_string
from werkzeug.utils import secure_filename
from flask_cors import CORS
import uuid


app = Flask(__name__)
CORS(app, origins=["http://localhost:5173"])
UPLOAD_FOLDER = 'diagrams/'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# --- Logging Setup ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(name)s %(message)s',
    handlers=[
        logging.FileHandler("app.log"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Static file serving for diagrams folder
@app.route('/diagrams/<path:filename>')
def serve_diagram_file(filename):
    return send_from_directory(UPLOAD_FOLDER, filename)



from llm_providers import generate_code_openai

@app.route('/generate', methods=['POST'])

def generate_diagram():
    import re, subprocess, traceback, resource
    from diagrams_whitelist import is_code_whitelisted

    def error_response(message, status=400, **kwargs):
        logger.error(f"API error: {message}")
        resp = {'error': message}
        resp.update(kwargs)
        return jsonify(resp), status

    data = request.json
    description = data.get('description') if data else None
    if not isinstance(description, str) or not description.strip():
        return error_response('Description must be a non-empty string.', 400)
    if len(description) > 15000:
        return error_response('Description is too long (max 15000 chars).', 400)

    provider = data.get('provider') if data else None
    provider = provider.strip().lower() if provider else None
    provider_map = {
        'aws': 'instructions_aws.md',
        'azure': 'instructions_azure.md',
        'gcp': 'instructions_gcp.md'
    }
    instructions_file = provider_map.get(provider)
    if not instructions_file:
        return error_response('No cloud provider specified. Please set provider to aws, azure, or gcp.', 400)

    try:
        with open(instructions_file, 'r') as f:
            instructions = f.read()
    except Exception as e:
        return error_response(f'Failed to read {instructions_file}: {e}', 500)

    # Generate code with OpenAI
    try:
        code = generate_code_openai(description, instructions)
        logger.info("Code generated by OpenAI successfully.")
    except Exception as e:
        tb = traceback.format_exc()
        if (hasattr(e, 'status_code') and e.status_code == 429) or 'quota' in str(e).lower() or 'rate limit' in str(e).lower():
            return error_response(
                'OpenAI API quota exceeded. Please check your plan and billing at https://platform.openai.com/account/usage',
                429,
                python_code=None,
                raw_code_url=None,
                sanitized_code_url=None
            )
        return error_response(f'OpenAI API error: {str(e)}', 500, traceback=tb)

    # Save raw code
    raw_code_path = os.path.join(UPLOAD_FOLDER, 'generated_diagram_raw.py')
    try:
        with open(raw_code_path, 'w') as f:
            f.write(code)
        logger.info(f"Raw code saved to {raw_code_path}")
    except Exception as e:
        return error_response('Failed to save raw code', 500)

    # Whitelist check
    allowed, bad_line = is_code_whitelisted(code)
    if not allowed:
        return error_response(f'Invalid or unsupported import in generated code: {bad_line}', 400, raw_code_file=raw_code_path)

    # Sanitize code
    code = re.sub(r'filename\s*=\s*["\']([^"\']+)["\']', 'filename="generated_diagram"', code)
    code = re.sub(r'outformat\s*=\s*["\']([^"\']+)["\']', 'outformat="png"', code)
    sanitized_code_path = os.path.join(UPLOAD_FOLDER, 'generated_diagram.py')
    try:
        with open(sanitized_code_path, 'w') as f:
            f.write(code)
        logger.info(f"Sanitized code saved to {sanitized_code_path}")
    except Exception as e:
        return error_response('Failed to save sanitized code', 500)

    # Run diagram code
    cwd = os.getcwd()
    try:
        os.chdir(UPLOAD_FOLDER)
        try:
            proc = subprocess.run(
                ['python3', 'generated_diagram.py'],
                capture_output=True,
                text=True,
                timeout=60
            )
            logger.info(f"Diagram code executed. Return code: {proc.returncode}")
            if proc.returncode != 0:
                logger.error(f"Diagram code execution failed. Stderr: {proc.stderr}\nStdout: {proc.stdout}")
                # Try to return the diagram if it was generated, even if there was an error
                image_candidates = []
                try:
                    with open('generated_diagram.py', 'r') as f:
                        code_content = f.read()
                    m = re.search(r'filename\s*=\s*["\']([^"\']+)["\']', code_content)
                    if m:
                        base = m.group(1)
                        base_png = base if base.endswith('.png') else base + '.png'
                        image_candidates.append(base_png)
                        image_candidates.append(os.path.basename(base_png))
                    else:
                        m2 = re.search(r'with Diagram\((?:["\'])(.*?)(?:["\'])', code_content)
                        if m2:
                            title = m2.group(1)
                            title_clean = title.lower().replace(' ', '_').replace('/', '_')
                            image_candidates.append(title_clean + '.png')
                except Exception as e:
                    logger.warning(f"Could not infer image filename from code: {e}")
                for candidate in image_candidates:
                    if os.path.exists(candidate):
                        image_url = f'/diagrams/{candidate.replace(os.sep, "/")}'
                        return jsonify({
                            'diagram_path': candidate,
                            'image_url': image_url,
                            'error': 'Diagram code execution failed',
                            'stderr': proc.stderr,
                            'stdout': proc.stdout
                        }), 206
                # Fallback: search for any .png in folder
                for fname in os.listdir('.'):
                    if fname.endswith('.png'):
                        image_url = f'/diagrams/{fname.replace(os.sep, "/")}'
                        return jsonify({
                            'diagram_path': fname,
                            'image_url': image_url,
                            'error': 'Diagram code execution failed',
                            'stderr': proc.stderr,
                            'stdout': proc.stdout
                        }), 206
                return error_response('Diagram code execution failed', 500, stderr=proc.stderr, stdout=proc.stdout)
        except Exception as e:
            logger.error(f"Diagram execution error: {e}")
            return error_response(f'Diagram execution error: {str(e)}', 500)
    finally:
        os.chdir(cwd)

    # Collect output files
    output_formats = ["png", "svg", "pdf", "dot", "jpg"]
    base_names = set()
    try:
        with open(sanitized_code_path, 'r') as f:
            code_content = f.read()
        m = re.search(r'filename\s*=\s*["\']([^"\']+)["\']', code_content)
        if m:
            base = m.group(1)
            base_png = base if base.endswith('.png') else base + '.png'
            base_names.add(os.path.splitext(os.path.basename(base_png))[0])
        else:
            m2 = re.search(r'with Diagram\((?:["\'])(.*?)(?:["\'])', code_content)
            if m2:
                title = m2.group(1)
                title_clean = title.lower().replace(' ', '_').replace('/', '_')
                base_names.add(title_clean)
    except Exception as e:
        logger.warning(f"Could not infer image filename from code: {e}")
    # Fallback: search for any output file in UPLOAD_FOLDER and subfolders
    for root, dirs, files in os.walk(UPLOAD_FOLDER):
        for fname in files:
            for ext in output_formats:
                if fname.endswith('.' + ext):
                    base = os.path.splitext(fname)[0]
                    base_names.add(base)

    if base_names:
        urls = {}
        for base in base_names:
            for ext in output_formats:
                fpath = os.path.join(UPLOAD_FOLDER, f"{base}.{ext}")
                if os.path.exists(fpath):
                    rel_path = os.path.relpath(fpath, UPLOAD_FOLDER)
                    urls[ext] = f'/diagrams/{rel_path.replace(os.sep, "/")}'
        logger.info(f"Diagram files generated: {urls}")
        raw_code_url = '/diagrams/generated_diagram_raw.py'
        sanitized_code_url = '/diagrams/generated_diagram.py'
        python_code = None
        try:
            with open(sanitized_code_path, 'r') as f:
                python_code = f.read()
        except Exception as e:
            logger.warning(f"Could not read sanitized code for response: {e}")
        return jsonify({
            'diagram_files': urls,
            'raw_code_url': raw_code_url,         # Only URL for raw code, not the code itself
            'sanitized_code_url': sanitized_code_url
        })

    return error_response('Diagram image not found', 500)


if __name__ == '__main__':
    app.run(debug=True, port=5050)
